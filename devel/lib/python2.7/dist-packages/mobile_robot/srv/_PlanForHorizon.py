# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobile_robot/PlanForHorizonRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mobile_robot.msg

class PlanForHorizonRequest(genpy.Message):
  _md5sum = "110487f1256d199309e59bf3a67dfecb"
  _type = "mobile_robot/PlanForHorizonRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 total_robots
int16 horizon_length
PlanInstance[] plans

================================================================================
MSG: mobile_robot/PlanInstance
int16 robot_id
int16 horizon_step
float32 x
float32 y
float32 theta

"""
  __slots__ = ['total_robots','horizon_length','plans']
  _slot_types = ['int16','int16','mobile_robot/PlanInstance[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       total_robots,horizon_length,plans

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanForHorizonRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.total_robots is None:
        self.total_robots = 0
      if self.horizon_length is None:
        self.horizon_length = 0
      if self.plans is None:
        self.plans = []
    else:
      self.total_robots = 0
      self.horizon_length = 0
      self.plans = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2h().pack(_x.total_robots, _x.horizon_length))
      length = len(self.plans)
      buff.write(_struct_I.pack(length))
      for val1 in self.plans:
        _x = val1
        buff.write(_get_struct_2h3f().pack(_x.robot_id, _x.horizon_step, _x.x, _x.y, _x.theta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.plans is None:
        self.plans = None
      end = 0
      _x = self
      start = end
      end += 4
      (_x.total_robots, _x.horizon_length,) = _get_struct_2h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plans = []
      for i in range(0, length):
        val1 = mobile_robot.msg.PlanInstance()
        _x = val1
        start = end
        end += 16
        (_x.robot_id, _x.horizon_step, _x.x, _x.y, _x.theta,) = _get_struct_2h3f().unpack(str[start:end])
        self.plans.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2h().pack(_x.total_robots, _x.horizon_length))
      length = len(self.plans)
      buff.write(_struct_I.pack(length))
      for val1 in self.plans:
        _x = val1
        buff.write(_get_struct_2h3f().pack(_x.robot_id, _x.horizon_step, _x.x, _x.y, _x.theta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.plans is None:
        self.plans = None
      end = 0
      _x = self
      start = end
      end += 4
      (_x.total_robots, _x.horizon_length,) = _get_struct_2h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plans = []
      for i in range(0, length):
        val1 = mobile_robot.msg.PlanInstance()
        _x = val1
        start = end
        end += 16
        (_x.robot_id, _x.horizon_step, _x.x, _x.y, _x.theta,) = _get_struct_2h3f().unpack(str[start:end])
        self.plans.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h3f = None
def _get_struct_2h3f():
    global _struct_2h3f
    if _struct_2h3f is None:
        _struct_2h3f = struct.Struct("<2h3f")
    return _struct_2h3f
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobile_robot/PlanForHorizonResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PlanForHorizonResponse(genpy.Message):
  _md5sum = "04c324cba8007ef9d719444128ac85c2"
  _type = "mobile_robot/PlanForHorizonResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 next_horizon

"""
  __slots__ = ['next_horizon']
  _slot_types = ['int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       next_horizon

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanForHorizonResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.next_horizon is None:
        self.next_horizon = 0
    else:
      self.next_horizon = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_h().pack(self.next_horizon))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 2
      (self.next_horizon,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_h().pack(self.next_horizon))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 2
      (self.next_horizon,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
class PlanForHorizon(object):
  _type          = 'mobile_robot/PlanForHorizon'
  _md5sum = '6087eeac782002dae0e0d755723c10aa'
  _request_class  = PlanForHorizonRequest
  _response_class = PlanForHorizonResponse
