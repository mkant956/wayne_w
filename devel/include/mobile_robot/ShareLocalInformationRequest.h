// Generated by gencpp from file mobile_robot/ShareLocalInformationRequest.msg
// DO NOT EDIT!


#ifndef MOBILE_ROBOT_MESSAGE_SHARELOCALINFORMATIONREQUEST_H
#define MOBILE_ROBOT_MESSAGE_SHARELOCALINFORMATIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobile_robot
{
template <class ContainerAllocator>
struct ShareLocalInformationRequest_
{
  typedef ShareLocalInformationRequest_<ContainerAllocator> Type;

  ShareLocalInformationRequest_()
    : robot_id(0)
    , horizon(0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , workspace()  {
    }
  ShareLocalInformationRequest_(const ContainerAllocator& _alloc)
    : robot_id(0)
    , horizon(0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , workspace(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _robot_id_type;
  _robot_id_type robot_id;

   typedef int16_t _horizon_type;
  _horizon_type horizon;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _theta_type;
  _theta_type theta;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _workspace_type;
  _workspace_type workspace;




  typedef boost::shared_ptr< ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ShareLocalInformationRequest_

typedef ::mobile_robot::ShareLocalInformationRequest_<std::allocator<void> > ShareLocalInformationRequest;

typedef boost::shared_ptr< ::mobile_robot::ShareLocalInformationRequest > ShareLocalInformationRequestPtr;
typedef boost::shared_ptr< ::mobile_robot::ShareLocalInformationRequest const> ShareLocalInformationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mobile_robot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'mobile_robot': ['/home/pi/catkin_ws/src/mobile_robot/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72fbadfc199772ffb3ff7f2d27d7a717";
  }

  static const char* value(const ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72fbadfc199772ffULL;
  static const uint64_t static_value2 = 0xb3ff7f2d27d7a717ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobile_robot/ShareLocalInformationRequest";
  }

  static const char* value(const ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 robot_id\n\
int16 horizon\n\
float32 x\n\
float32 y\n\
float32 theta\n\
float32[] workspace\n\
";
  }

  static const char* value(const ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.horizon);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
      stream.next(m.workspace);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ShareLocalInformationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobile_robot::ShareLocalInformationRequest_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "horizon: ";
    Printer<int16_t>::stream(s, indent + "  ", v.horizon);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "workspace[]" << std::endl;
    for (size_t i = 0; i < v.workspace.size(); ++i)
    {
      s << indent << "  workspace[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.workspace[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILE_ROBOT_MESSAGE_SHARELOCALINFORMATIONREQUEST_H
